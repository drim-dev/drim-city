- name: Setup backend
  hosts: backend
  vars:
    docker_compose_dir: /srv/drim-city

  tasks:
  - name: Add Docker GPG apt Key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg

  - name: Add Docker repository
    apt_repository:
      repo: deb https://download.docker.com/linux/ubuntu focal stable

  - name: Update apt and install docker-ce
    apt:
      name: docker-ce
      update_cache: true

  - name: Create docker compose directory
    file:
      path: "{{ docker_compose_dir }}"
      state: directory

  - name: Install docker compose config
    template:
      src: templates/docker-compose.yml.j2
      dest: "{{ docker_compose_dir }}/docker-compose.yml"

- name: Setup database
  hosts: database
  vars:
    postgres_version: "14"
    postgres_bin_path: "/usr/lib/postgresql/{{ postgres_version }}/bin"
    postgres_config_dir: "/etc/postgresql/{{ postgres_version }}/main"
    postgres_volume_dir: /mnt/HC_Volume_100221664
    postgres_data_dir: "{{ postgres_volume_dir }}/data"

  tasks:
  - name: Upgrade system
    apt:
      upgrade: dist
      update_cache: yes

  - name: Install packages
    apt:
      name:
      - postgresql
      - postgresql-contrib
      - libpq-dev
      - python3-psycopg2
      state: present

  - name: Set volume directory owner
    file:
      path: "{{ postgres_volume_dir }}"
      owner: postgres
      group: postgres
      mode: "755"

  - name: Check if PostgreSQL is initialized
    stat:
      path: "{{ postgres_data_dir }}/pg_hba.conf"
    register: postgres_data

  - name: Empty data dir
    file:
      path: "{{ postgres_data_dir }}"
      state: absent
    when: not postgres_data.stat.exists

  - name: Initialize PostgreSQL
    shell: "{{ postgres_bin_path }}/initdb -D {{ postgres_data_dir }}"
    become: true
    become_user: postgres
    when: not postgres_data.stat.exists

  - name: Stop service
    service:
      name: postgresql
      state: stopped
      enabled: yes

  - name: Allow connections from backend
    lineinfile:
      state: present
      path: "{{ postgres_config_dir }}/pg_hba.conf"
      line: "host all {{ postgres_user }} {{ backend_ip }}/32 scram-sha-256"

  - name: Allow connections from internal network
    lineinfile:
      path: "{{ postgres_config_dir }}/postgresql.conf"
      regexp: "^(.*)listen_addresses(.*)$"
      line: "listen_addresses = '{{ database_ip }}, localhost'"
      backrefs: yes

  - name: Start and enable service
    service:
      name: postgresql
      state: started
      enabled: yes

  - name: Create DB user
    community.postgresql.postgresql_user:
      state: present
      name: "{{ postgres_user }}"
      password: "{{ postgres_password }}"
      role_attr_flags: LOGIN,CREATEDB
    become: true
    become_user: postgres

- name: Setup frontend
  hosts: frontend

  tasks:
  - name: Upgrade system
    apt:
      upgrade: dist
      update_cache: yes

  - name: Install python3-simplejson
    apt:
      name: python3-simplejson

  - name: Install nginx
    apt:
      name: nginx

  - name: Install certbot
    apt:
      name: certbot

  - name: Create Let's Encrypt directory
    file:
      name: /var/www/letsencrypt
      state: directory

  - name: Remove default nginx config
    file:
      name: /etc/nginx/sites-enabled/default
      state: absent

  - name: Install system nginx config
    template:
      src: templates/nginx.conf.j2
      dest: /etc/nginx/nginx.conf

  - name: Install HTTP nginx site for Let's Encrypt requests
    template:
      src: templates/nginx-http.j2
      dest: /etc/nginx/sites-enabled/http

  - name: Reload nginx to activate HTTP site
    service:
      name: nginx
      state: restarted

  - name: Create Let's Encrypt certificate
    shell: certbot certonly -n --webroot -w /var/www/letsencrypt -m {{ admin_email }} --agree-tos -d {{ domain_name }}
    args:
      creates: /etc/letsencrypt/live/{{ domain_name }}

  - name: Generate dhparams
    shell: openssl dhparam -out /etc/nginx/dhparams.pem 2048
    args:
      creates: /etc/nginx/dhparams.pem

  - name: Install nginx site for HTTPS site
    template:
      src: templates/nginx-https.j2
      dest: /etc/nginx/sites-enabled/https

  - name: Reload nginx to activate HTTPS site
    service:
      name: nginx
      state: restarted

  - name: Add certbot cronjob for certificate renewal
    cron:
      name: certbot_renewal
      special_time: weekly
      job: certbot --renew certonly -n --webroot -w /var/www/certbot -m {{ admin_email }} --agree-tos -d {{ domain_name }} && service nginx reload
